{"version":3,"sources":["components/buttons/Clickable.jsx","components/buttons/NotClickable.jsx","components/cards/MovieCard.jsx","components/MovieBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Clickable","props","Button","variant","type","disabled","onClick","event","handleNominate","title","year","index","NotClickable","MovieCard","useState","Card","Header","as","header","cardTitle","Body","Text","list","MovieBox","movieTitle","setMovieTitle","omdbUrl","Search","Year","Title","movieInfo","setMovieInfo","nominationList","setNominationList","show","setShow","titles","setTitles","useEffect","axios","method","url","then","res","data","titlesList","map","movie","length","id","nominated","NominationLimitAlert","Alert","onClose","dismissible","Heading","handleRemoveNomination","newList","filter","nom","findNominated","movieYear","find","moviesList","onSubmit","preventDefault","renderedNoms","nominationsListView","class","Form","Group","Label","InputGroup","className","Prepend","Control","placeholder","onChange","target","value","CardDeck","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c38cd2a.chunk.js","sourcesContent":["import {Button} from 'react-bootstrap';\n\nexport default function Clickable(props){\n\n  return (\n\n      <Button \n        variant=\"primary\" \n        type=\"submit\" \n        disabled={false} \n        onClick={(event) => {\n          // event.preventDefault()\n          // props.setTitles( props.nominationList )\n          props.handleNominate( props.title, props.year, props.index )\n          }\n        }\n      >\n        Nominate\n      </Button>\n\n  )\n}","import {Button} from 'react-bootstrap';\n\nexport default function NotClickable(props){\n\n  return (\n\n      <Button \n        variant=\"primary\" \n        type=\"submit\" \n        disabled\n        onClick={(event) => {\n          // event.preventDefault()\n          // props.handleNominate( props.title, props.year, props.index )\n          }\n        }\n      >\n        Nominate\n      </Button>\n\n  )\n}","import {Card, Alert} from 'react-bootstrap';\nimport {useState} from 'react';\n// import nominationLimitAlert from '../MovieBox'\n\nexport default function MovieCard(props){\n  const [show, setShow] = useState(false);\n\n  return (\n    <Card>\n      <Card.Header as=\"h5\"> {props.header} {props.cardTitle}</Card.Header>\n      <Card.Body>\n        <Card.Text>\n          <ul>\n            {props.list}\n          </ul>\n        </Card.Text>\n      </Card.Body>\n    </Card>\n  )\n}","import { Form, Card, ToggleButton, Button, CardDeck, InputGroup, Col, Alert, ButtonGroup } from 'react-bootstrap';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './MovieBox.css';\nimport './buttons/Clickable';\nimport Clickable from './buttons/Clickable';\nimport NotClickable from './buttons/NotClickable';\nimport MovieCard from './cards/MovieCard';\n\n\nexport default function MovieBox() {\n  const [movieTitle, setMovieTitle] = useState(\"\");\n  const omdbUrl = `https://www.omdbapi.com/?apikey=91c918d&s=${movieTitle}&type=movie`;\n  const [movieInfo, setMovieInfo] = useState([{ Search: \"\", Year: \"\", Title: \"\"}]);\n  const [nominationList, setNominationList] = useState([]);\n  // const [disabled, setDisabled] = useState(false)\n  const [show, setShow] = useState(false);\n  const [titles, setTitles] = useState([]);\n  // const [movieList, setMovieList] = useState([]);\n  // const [checked, setChecked] = useState(false, disabled);\n\n//query the omdB api for movie title, refresh on url changes\n  useEffect(() =>{\n    axios({\n      method: \"GET\",\n      url: omdbUrl,\n    })\n    .then(res =>{\n      if(res.data.Search) {\n        setMovieInfo(res.data.Search)\n      } else {\n        setMovieInfo([\"Nothing\"])\n      }\n    })\n    // .catch()\n  }, [omdbUrl])\n  \n//update titlelist any time niominationlist is changed \n//updates 'nominate' button click, to disable button on click\n  useEffect(()=>{\n    const titlesList = nominationList.map((movie)=> movie.title + movie.year)\n    setTitles(titlesList)\n  }, [nominationList])\n\n  //handle selection of 'nominate' button, add selected movie to nominations list\n  const handleNominate = (title, year, index) =>{\n    //limit nomination list to five entries\n    if (nominationList.length < 5){\n      //append selected nomination to list,with movie title and year\n      setNominationList(nominationList => [...nominationList, {title: title, year: year, id: index, nominated: true}])\n    }\n    //when nomination list is full, alert user\n    if (nominationList.length === 4){\n      setShow(true)\n    }\n  }\n\n  function NominationLimitAlert() {\n    if (show) {\n      return (\n        <Alert variant=\"info\" onClose={() => setShow(false)} dismissible>\n          <Alert.Heading>Congratulations, you've chosen <b>5</b> films!</Alert.Heading>\n          <p>\n            Please note: \n            If you'd like to change your current nominations, you may remove titles \n            from your list and add new ones.\n          </p>\n        </Alert>\n      );\n    }\n    return \"\";\n  }\n\n  const handleRemoveNomination = (index, title, year) => {\n    //remove movie from nomination list\n    const newList = nominationList.filter(nom => nom.title+nom.year !== title+year)\n    //replace nominations list with NEW filtered list. Do not splice as it changes list in state\n      setNominationList(newList)\n      // setTitles(newList.map((movie)=> movie.title + movie.year))\n  }\n\n  const findNominated = (movieTitle, movieYear) => {\n    //check if clicked title is in nomination list\n    const found = titles.find(title => title === movieTitle+movieYear)\n    if (found) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  const moviesList = movieInfo.map((movie, index)=>{\n  //map through movies from user input and add to results list\n    return (\n\n      <div>\n      {/* wrap li in div to only render list element if it is populated */}\n      { movieInfo.length >1 &&\n        <li>\n          {/* prevent default to stop page refresh on form submission */}\n          <form onSubmit={(event)=> event.preventDefault()}>\n            {/* {movieInfo.length > 1} */}\n            {movie.Title} ({movie.Year})\n\n            {/* if movie is already nominated, disable to nominate button */}\n            {movieInfo.length > 1 && (findNominated(movie.Title, movie.Year) ? <NotClickable/> : <Clickable \n              handleNominate={handleNominate} \n              title={movie.Title} \n              year={movie.Year} \n              />)}\n          </form> \n        </li> \n      }\n      </div>\n    )\n  });\n\n  function nominationsListView(nominationList){\n    const nominationListView = nominationList.map((movie, index)=>{\n\n      return (\n        <li>\n          <form onSubmit={(event)=> event.preventDefault()}>\n            {movie.title} ({movie.year})\n            <Button \n              id={movie.index}\n              variant=\"info\" \n              type=\"submit\" \n              onClick={(event) => {\n                event.preventDefault()\n                handleRemoveNomination( {index}, movie.title, movie.year )\n                }\n              }\n            >\n            Remove\n          </Button>\n          </form>\n        </li>\n      )\n    }) \n    return nominationListView\n  } \n\n  const renderedNoms = nominationsListView(nominationList)\n\n  return (\n    <div class=\"wrapper\">\n      <Card>\n        <Card.Body>\n          <Card.Text>\n            {/* <Col> */}\n              <Form onSubmit={(event)=> event.preventDefault()} >\n                <Form.Group>\n                  <Form.Label>Movie Title</Form.Label>\n                  <InputGroup className=\"mb-2\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text>&#128269;</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <Form.Control \n                      type=\"text\" \n                      placeholder= \"Enter movie title here...\" \n                      onChange={(event)=> setMovieTitle(event.target.value)}\n                    />\n                  </InputGroup>\n                </Form.Group>\n              </Form>\n            {/* </Col> */}\n          </Card.Text>\n        </Card.Body>\n      </Card>\n\n      {nominationList.length>4 && <NominationLimitAlert />}\n\n      <CardDeck>\n        <MovieCard header= \"Results for: \" cardTitle={movieTitle} list={moviesList}/>\n        <MovieCard header= \"Nominations\" list={renderedNoms}/>\n      </CardDeck>\n    </div>\n  );\n}","import './App.css';\nimport MovieBox from './components/MovieBox'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    \n      <div id=\"wrapper\">\n        <header className=\"App-header\">\n          <h1>\n            The Shoppies\n          </h1>\n        <MovieBox />\n        </header>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}